Hoisting in let and const variable
----------------------------------

    Are let and const Variables Hoisted?
    ------------------------------------

        A common question during interviews or discussions is whether let and const variables are hoisted. 
        The answer is yes, they are hoisted. However, they exist in something called the "Temporal Dead Zone"
        (TDZ) until they are initialized.

    
    Understanding the Temporal Dead Zone (TDZ)
    ------------------------------------------

        The TDZ is the time between the variable's hoisting and its initialization. During this period, 
        accessing the variable results in a ReferenceError.


    Example-1:
    ----------

        var x = 10 ;
        let y = 15 ;
        console.log(x); 
        console.log(y);

        Output
        10
        15

        
    Example-2:
    ----------

        console.log(x);
        console.log(y);
        var x = 10;
        let y = 15;

        If you try to run the above code it will show an error saying "ReferenceError: 
        Cannot access 'y' before initialization".


    Example-3:
    ----------

        Now let us see what happens when we try to access a variable that is not even declared in a JS Programe.

        console.log(a);

        Upon running the above code You will see an error saying "ReferenceError: a is not defined"

        Now here comes the answer to the initial question of whether hoisting occurs in let and const or not.
        If you look closely at Example-2 the error says cannot access y before initialization but in Example-3
        the error is "a is not defined".Since we can clearly see the error in the example is about not accessing 
        variable y before initialization it means that it must have existed somewhere in the memory before 
        initialization but we are unable to access it. This special place in memory that we cannot access is 
        known as the Temporal Dead zone. So let and const are hoisted but they exist in Temporal Dead Zone.

        // TDZ starts here 

        console.log(x);  // Throws ReferenceError
        let x = 9 ;      // TDZ ends here 
        console.log(x);


    Temporal Dead zone
    ------------------

        The TDZ starts from the beginning of the block scope.
        The TDZ ends when the variable is initialized.


    Understanding Hoisting with const
    ---------------------------------

        The behavior of const is similar to let regarding hoisting:

        console.log(z);  // Throws ReferenceError: Cannot access 'z' before initialization
        const z = 10;

        Again, this error indicates that the variable z is known to exist but is not accessible 
        before its initialization.


    Key Points
    ----------

        1. Hoisting: let and const variables are hoisted but exist in the TDZ until initialization.
        2. TDZ: The period from the start of the block until the variable is initialized.
        3. Errors: Accessing a variable in the TDZ results in a ReferenceError.